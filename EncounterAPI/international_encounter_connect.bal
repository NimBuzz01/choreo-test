// // Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by WSO2 Healthcare Team for implementing source system connections.
// Developers are allowed modify this file as per the requirement.

import wso2healthcare/healthcare.fhir.r4;

public isolated class InternationalEncounterSourceConnect {

    *EncounterSourceConnect;
    isolated function profile() returns r4:uri {
        return "http://hl7.org/fhir/StructureDefinition/Encounter";
    }

    isolated function read(string id, r4:FHIRContext ctx) returns Encounter|r4:FHIRError {

        //Implement source system connection here and retreive data.
        //Create FHIR resource from retreived data.
        r4:Encounter example = {
            id: "12d39",
            meta: {
                versionId: "abc12s3",
                profile: ["http://hl7.org/fhir/StructureDefinition/Encounter"]
            },
            identifier: [
            ],
            implicitRules: "https://www.hl7.org/fhir",
            language: "en-US",
            status: <r4:EncounterStatusHistoryStatus>"preliminary",
            'class: {}
        };
        return example;
    }

    isolated function search(map<r4:RequestSearchParameter[]> searchParameters, r4:FHIRContext ctx) returns r4:Bundle|Encounter[]|r4:FHIRError {

        r4:Encounter[] encounters = [];

        //Implement source system connection here and retreive data.
        //Create FHIR resource from retreived data.
        r4:Encounter example = {
            id: "12d39",
            meta: {
                versionId: "abc12s3",
                profile: ["http://hl7.org/fhir/StructureDefinition/Encounter"]
            },
            identifier: [
            ],
            implicitRules: "https://www.hl7.org/fhir",
            language: "en-US"
        ,
            status: <r4:EncounterStatusHistoryStatus>"preliminary"
        ,
            'class: {}
        };
        r4:Encounter example1 = {
            id: "12c39",
            meta: {
                versionId: "abc12s3",
                profile: ["http://hl7.org/fhir/StructureDefinition/Encounter"]
            },
            identifier: [
            ],
            implicitRules: "https://www.hl7.org/fhir",
            language: "en-US",
            status: <r4:EncounterStatusHistoryStatus>"preliminary",
            'class: {}
        };
        encounters.push(example);
        encounters.push(example1);
        return encounters;
    }
    
    isolated function create(r4:FHIRResourceEntity encounter, r4:FHIRContext ctx) returns string|r4:FHIRError {

        //Implement source system connection here and persist FHIR resource.
        //Must respond with ID in order to create Location header

        string resourceId = "logicalId"; //returned from the source system
        return resourceId;
    }
}

